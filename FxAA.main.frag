// GLSL Fragment Shader "main"
// Generated by XShaderCompiler
// 01/10/2020 22:52:25

#version 450

in vec2 xsv_TEXCOORD0;

out vec4 SV_Target0;

struct FxaaTex
{
    int xst_dummy;
    sampler2D tex;
};

float FxaaLuma(vec4 rgba)
{
    return rgba.y;
}

vec4 FxaaPixelShader(vec2 pos, FxaaTex tex, vec2 fxaaQualityRcpFrame, float fxaaQualitySubpix, float fxaaQualityEdgeThreshold, float fxaaQualityEdgeThresholdMin)
{
    vec2 posM;
    posM.x = pos.x;
    posM.y = pos.y;
    vec4 rgbyM = textureLod(tex.tex, posM, 0.0);
    float lumaS = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(0, 1)));
    float lumaE = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(1, 0)));
    float lumaN = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(0, -1)));
    float lumaW = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(-1, 0)));
    float maxSM = max(lumaS, rgbyM.w);
    float minSM = min(lumaS, rgbyM.w);
    float maxESM = max(lumaE, maxSM);
    float minESM = min(lumaE, minSM);
    float maxWN = max(lumaN, lumaW);
    float minWN = min(lumaN, lumaW);
    float rangeMax = max(maxWN, maxESM);
    float rangeMin = min(minWN, minESM);
    float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
    float range = rangeMax - rangeMin;
    float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
    bool earlyExit = range < rangeMaxClamped;
    if (earlyExit)
        return rgbyM;
    float lumaNW = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(-1, -1)));
    float lumaSE = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(1, 1)));
    float lumaNE = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(1, -1)));
    float lumaSW = FxaaLuma(textureLodOffset(tex.tex, posM, 0.0, ivec2(-1, 1)));
    float lumaNS = lumaN + lumaS;
    float lumaWE = lumaW + lumaE;
    float subpixRcpRange = 1.0f / range;
    float subpixNSWE = lumaNS + lumaWE;
    float edgeHorz1 = (float(-2.0) * rgbyM.w) + lumaNS;
    float edgeVert1 = (float(-2.0) * rgbyM.w) + lumaWE;
    float lumaNESE = lumaNE + lumaSE;
    float lumaNWNE = lumaNW + lumaNE;
    float edgeHorz2 = (float(-2.0) * lumaE) + lumaNESE;
    float edgeVert2 = (float(-2.0) * lumaN) + lumaNWNE;
    float lumaNWSW = lumaNW + lumaSW;
    float lumaSWSE = lumaSW + lumaSE;
    float edgeHorz4 = (abs(edgeHorz1) * 2.0f) + abs(edgeHorz2);
    float edgeVert4 = (abs(edgeVert1) * 2.0f) + abs(edgeVert2);
    float edgeHorz3 = (float(-2.0) * lumaW) + lumaNWSW;
    float edgeVert3 = (float(-2.0) * lumaS) + lumaSWSE;
    float edgeHorz = abs(edgeHorz3) + edgeHorz4;
    float edgeVert = abs(edgeVert3) + edgeVert4;
    float subpixNWSWNESE = lumaNWSW + lumaNESE;
    float lengthSign = fxaaQualityRcpFrame.x;
    bool horzSpan = edgeHorz >= edgeVert;
    float subpixA = subpixNSWE * 2.0f + subpixNWSWNESE;
    if (!horzSpan)
        lumaN = lumaW;
    if (!horzSpan)
        lumaS = lumaE;
    if (horzSpan)
        lengthSign = fxaaQualityRcpFrame.y;
    float subpixB = (subpixA * (1.0f / 12.0f)) - rgbyM.w;
    float gradientN = lumaN - rgbyM.w;
    float gradientS = lumaS - rgbyM.w;
    float lumaNN = lumaN + rgbyM.w;
    float lumaSS = lumaS + rgbyM.w;
    bool pairN = abs(gradientN) >= abs(gradientS);
    float gradient = max(abs(gradientN), abs(gradientS));
    if (pairN)
        lengthSign = -lengthSign;
    float subpixC = clamp(abs(subpixB) * subpixRcpRange, float(0), float(1));
    vec2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    vec2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;
    offNP.y = (horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;
    if (!horzSpan)
        posB.x += lengthSign * 0.5f;
    if (horzSpan)
        posB.y += lengthSign * 0.5f;
    vec2 posN;
    posN.x = posB.x - offNP.x * 1.0f;
    posN.y = posB.y - offNP.y * 1.0f;
    vec2 posP;
    posP.x = posB.x + offNP.x * 1.0f;
    posP.y = posB.y + offNP.y * 1.0f;
    float subpixD = (float((-2.0)) * subpixC) + 3.0f;
    float lumaEndN = FxaaLuma(textureLod(tex.tex, posN, 0.0));
    float subpixE = subpixC * subpixC;
    float lumaEndP = FxaaLuma(textureLod(tex.tex, posP, 0.0));
    if (!pairN)
        lumaNN = lumaSS;
    float gradientScaled = gradient * 1.0f / 4.0f;
    float lumaMM = rgbyM.w - lumaNN * 0.5f;
    float subpixF = subpixD * subpixE;
    bool lumaMLTZero = lumaMM < 0.0f;
    lumaEndN -= lumaNN * 0.5f;
    lumaEndP -= lumaNN * 0.5f;
    bool doneN = abs(lumaEndN) >= gradientScaled;
    bool doneP = abs(lumaEndP) >= gradientScaled;
    if (!doneN)
        posN.x -= offNP.x * 1.5f;
    if (!doneN)
        posN.y -= offNP.y * 1.5f;
    bool doneNP = (!doneN) || (!doneP);
    if (!doneP)
        posP.x += offNP.x * 1.5f;
    if (!doneP)
        posP.y += offNP.y * 1.5f;
    float dstN = posM.x - posN.x;
    float dstP = posP.x - posM.x;
    if (!horzSpan)
        dstN = posM.y - posN.y;
    if (!horzSpan)
        dstP = posP.y - posM.y;
    bool goodSpanN = (lumaEndN < 0.0f) != lumaMLTZero;
    float spanLength = (dstP + dstN);
    bool goodSpanP = (lumaEndP < 0.0f) != lumaMLTZero;
    float spanLengthRcp = 1.0f / spanLength;
    bool directionN = dstN < dstP;
    float dst = min(dstN, dstP);
    bool goodSpan = directionN ? goodSpanN : goodSpanP;
    float subpixG = subpixF * subpixF;
    float pixelOffset = (dst * (-spanLengthRcp)) + 0.5f;
    float subpixH = subpixG * fxaaQualitySubpix;
    float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if (!horzSpan)
        posM.x += pixelOffsetSubpix * lengthSign;
    if (horzSpan)
        posM.y += pixelOffsetSubpix * lengthSign;
    return vec4(textureLod(tex.tex, posM, 0.0).xyz, rgbyM.w);
}

layout(std140) uniform PsConstants
{
    vec4 InvResolution;
    vec4 QualitySettings;
};

uniform sampler2D FrameTextureTexture;

void main()
{
    FxaaTex FrameTexture;
    FrameTexture.smpl = FrameTextureSampler;
    FrameTexture.tex = FrameTextureTexture;
    ;
    vec4 xsr_output = FxaaPixelShader(xsv_TEXCOORD0, FrameTexture, InvResolution.xy, QualitySettings.x, QualitySettings.y, QualitySettings.z);
    xsr_output.a = 1.0f;
    SV_Target0 = xsr_output;
}

